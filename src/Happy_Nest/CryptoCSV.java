
package Happy_Nest;


public abstract class CryptoCSV {
    
    public static void resetCounter() {
        counter = 0;
    }
    
    public static String encrypt (String word) {
        String text = "";
        for(int i = 0; i < word.length(); i++) {
            //System.out.println(word.charAt(i) + " + " + nums[counter] + " = " + ((int)word.charAt(i) + nums[counter]));
            text += (char)(chars[cyc(locate(word.charAt(i)) + nums[counter])]);
            counter = (counter + 1) % 512;
        }
        return text;
    }
    
    public static String decrypt (String word) {
        String text = "";
        for(int i = 0; i < word.length(); i++) {
            text += (char)(chars[cyc(locate(word.charAt(i)) - nums[counter])]);
            counter = (counter + 1) % 512;
        }
        return text;
    }
    
    private static int locate(char f) {
        for(int i = 0; i < chars.length; i++)
            if(f == chars[i])
                return i;
        return -1;
    }
    
    private static int cyc(int x)
    {
        if(x >= chars.length) {
            return x % chars.length;
        }
        while (x < 0) {
            x += chars.length;
        }
        return x;
    }
    
    // random generated offsets
    private static final int nums[] = {
        41, 67, 78, 4, 33, 84, 70, 10, 6, 84, 1, 85, 5, 83, 25, 31, 51, 74, 43, 8, 7, 68, 38, 61, 16, 54, 33,
        40, 30, 23, 19, 14, 51, 38, 29, 40, 91, 79, 15, 50, 91, 75, 42, 65, 9, 64, 53, 75, 9, 60, 63, 44, 2,
        5, 73, 71, 75, 81, 21, 42, 80, 91, 18, 2, 12, 22, 24, 18, 36, 16, 30, 69, 66, 13, 82, 78, 10, 5, 13,
        52, 33, 19, 72, 82, 80, 64, 90, 16, 39, 88, 16, 55, 62, 7, 17, 10, 18, 58, 21, 73, 49, 19, 39, 34, 72, 
        86, 85, 6, 25, 30, 53, 41, 60, 28, 14, 33, 5, 25, 37, 44, 66, 42, 53, 52, 91, 19, 11, 26, 75, 0, 26,
        46, 13, 12, 74, 26, 11, 15, 67, 21, 1, 51, 61, 79, 41, 77, 9, 6, 25, 4, 74, 14, 90, 58, 37, 4, 72, 23,
        86, 91, 22, 11, 24, 21, 20, 43, 87, 85, 14, 62, 79, 16, 82, 72, 88, 9, 24, 15, 72, 12, 1, 42, 53, 67,
        14, 62, 0, 16, 3, 7, 48, 81, 84, 35, 51, 29, 50, 85, 89, 38, 49, 72, 75, 63, 84, 5, 51, 0, 74, 35, 60,
        60, 48, 41, 85, 42, 67, 61, 57, 83, 71, 23, 58, 27, 88, 84, 26, 86, 64, 16, 78, 9, 85, 6, 41, 17, 48,
        70, 46, 56, 58, 75, 66, 33, 46, 27, 35, 72, 20, 11, 10, 58, 76, 91, 88, 14, 50, 10, 15, 5, 61, 86, 16,
        36, 77, 74, 18, 67, 85, 87, 61, 48, 16, 9, 15, 40, 24, 26, 27, 5, 13, 60, 61, 37, 75, 47, 34, 5, 78, 73,
        40, 54, 5, 21, 80, 20, 29, 38, 53, 77, 12, 49, 68, 80, 81, 67, 30, 81, 81, 36, 61, 28, 6, 73, 39, 3, 87,
        52, 35, 17, 9, 49, 86, 69, 9, 11, 77, 84, 42, 5, 16, 90, 35, 66, 82, 17, 36, 63, 82, 27, 81, 67, 89, 89,
        84, 44, 84, 61, 81, 64, 77, 54, 2, 14, 21, 4, 12, 74, 45, 45, 15, 26, 41, 70, 84, 39, 72, 35, 49, 60, 26,
        70, 53, 41, 30, 33, 58, 54, 52, 34, 19, 61, 18, 31, 82, 37, 73, 90, 22, 64, 78, 22, 84, 11, 57, 10, 35,
        53, 66, 81, 17, 70, 15, 0, 80, 1, 66, 16, 49, 83, 18, 51, 75, 49, 71, 84, 75, 72, 89, 13, 91, 16, 25, 85,
        1, 59, 28, 50, 18, 6, 0, 80, 51, 80, 57, 62, 10, 6, 51, 13, 23, 0, 36, 67, 17, 38, 48, 78, 27, 4, 51, 9,
        80, 74, 26, 82, 75, 18, 78, 53, 23, 0, 6, 36, 51, 60, 40, 55, 56, 86, 86, 65, 62, 75, 8, 51, 83, 34, 80,
        49, 62, 66, 33, 83, 45, 30, 49, 51, 17, 4, 31, 0, 2, 58, 31, 32, 57, 13, 75, 49, 68, 72, 38, 20, 62, 86,
        31, 43, 63, 63, 85, 84
    };
    
    //random chars order
    private static final char chars[] = {
        'I', 'E', 'D', '{', 'A', 'l', 'T', 's', 'C', '1', '>', '*', '.', 'g', 'P', '%', 'M', '0', 'v',
        '4', 'f', 'h', '(', '$', 'J', 'u', '9', '~', 'z', 'V', '8', 'm', '-', '/', 'N', 'k', 'e', 'b', 'Y',
        'W', 'y', '?', 'r', 'L', 'o', 'B', '[', '+', 'F', '<', '=', 'n', '&', '_', '\'', 'j', 'Q', '!',
        '2', 'd', '`', 't', ' ', '6', 'H', 'K', '#', 'w', '^', ':', '3', ']', 'p', 'G', '|', '7', 'c', 'q',
        'U', '@', '}', ')', 'R', 'Z', 'X', 'O', ';', ',', 'x', 'a', 'S', 'i', '5', '\n'
    };
    private static int counter;
}
